{"version":3,"file":"static/js/822.18112909.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/src/Check.tsx","../node_modules/@chakra-ui/icons/src/Edit.tsx","../node_modules/@chakra-ui/icons/src/Search.tsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/card/src/card-header.tsx","../node_modules/@chakra-ui/card/src/card-footer.tsx","components/Home/Home.jsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/icons/src/Delete.tsx","../node_modules/@chakra-ui/icons/src/Phone.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["import { createIcon } from \"@chakra-ui/icon\"\n\nexport const CheckIcon = createIcon({\n  viewBox: \"0 0 14 14\",\n  path: (\n    <g fill=\"currentColor\">\n      <polygon points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const EditIcon = createIcon({\n  displayName: \"EditIcon\",\n  path: (\n    <g fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeWidth=\"2\">\n      <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n      <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const SearchIcon = createIcon({\n  d: \"M23.384,21.619,16.855,15.09a9.284,9.284,0,1,0-1.768,1.768l6.529,6.529a1.266,1.266,0,0,0,1.768,0A1.251,1.251,0,0,0,23.384,21.619ZM2.75,9.5a6.75,6.75,0,1,1,6.75,6.75A6.758,6.758,0,0,1,2.75,9.5Z\",\n  displayName: \"SearchIcon\",\n})\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardHeaderProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardHeader = forwardRef<CardHeaderProps, \"div\">(\n  function CardHeader(props, ref) {\n    const { className, ...rest } = props\n    const styles = useCardStyles()\n    return (\n      <chakra.div\n        ref={ref}\n        className={cx(\"chakra-card__header\", className)}\n        __css={styles.header}\n        {...rest}\n      />\n    )\n  },\n)\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  chakra,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardFooterProps extends HTMLChakraProps<\"div\"> {\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport const CardFooter = forwardRef<CardFooterProps, \"div\">(\n  function CardFooter(props, ref) {\n    const { className, justify, ...rest } = props\n    const styles = useCardStyles()\n    return (\n      <chakra.div\n        ref={ref}\n        className={cx(\"chakra-card__footer\", className)}\n        __css={{\n          display: \"flex\",\n          justifyContent: justify,\n          ...styles.footer,\n        }}\n        {...rest}\n      />\n    )\n  },\n)\n","import {\n  CheckIcon,\n  EditIcon,\n  SearchIcon,\n  DeleteIcon,\n  PhoneIcon,\n} from '@chakra-ui/icons';\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  Heading,\n  Text,\n  Stack,\n  SimpleGrid,\n} from '@chakra-ui/react';\n\nexport default function Home() {\n  return (\n    <>\n      <Card\n        direction={{ base: 'column', sm: 'row' }}\n        alignItems=\"center\"\n        variant=\"outline\"\n        padding=\"20px\"\n      >\n        <CheckIcon />\n\n        <Stack>\n          <CardBody>\n            <Heading size=\"md\">\n              Introducing \"PhoneBookSave\" – Your Ultimate Contact App!\n            </Heading>\n\n            <Text py=\"2\">\n              Tired of losing track of important contacts? Meet PhoneBookSave,\n              the innovative app designed to revolutionize how you organize your\n              contacts effortlessly.\n            </Text>\n          </CardBody>\n        </Stack>\n      </Card>\n      <SimpleGrid\n        spacing={4}\n        paddingTop=\"15px\"\n        justify=\"center\"\n        templateColumns=\"repeat(auto-fill, minmax(400px, 1fr))\"\n      >\n        <Card>\n          <CardHeader>\n            <Heading size=\"md\"> Intuitive Interface:</Heading>\n          </CardHeader>\n          <CardBody>\n            <Text>\n              Streamlined design for seamless navigation and user-friendly\n              experience.\n            </Text>\n          </CardBody>\n          <CardFooter justifyContent=\"center\">\n            <EditIcon />\n          </CardFooter>\n        </Card>\n        <Card>\n          <CardHeader>\n            <Heading size=\"md\"> Quick Search:</Heading>\n          </CardHeader>\n          <CardBody>\n            <Text>\n              Find any contact in seconds with our powerful search feature. No\n              more scrolling endlessly.\n            </Text>\n          </CardBody>\n          <CardFooter justifyContent=\"center\">\n            <SearchIcon />\n          </CardFooter>\n        </Card>\n        <Card>\n          <CardHeader>\n            <Heading size=\"md\"> Easy Deletion: </Heading>\n          </CardHeader>\n          <CardBody>\n            <Text>\n              Need to declutter your contacts? PhoneBookSave makes it a breeze\n              to remove unwanted entries. Just a one taps, and you're done!\n            </Text>\n          </CardBody>\n          <CardFooter justifyContent=\"center\">\n            <DeleteIcon />\n          </CardFooter>\n        </Card>\n        <Card>\n          <CardHeader>\n            <Heading size=\"md\">24/7 Accessibility: </Heading>\n          </CardHeader>\n          <CardBody>\n            <Text>\n              Whether you're at work, home, or on the go, ConnectSave is at your\n              fingertips. Access your contacts anytime, anywhere our app is\n              designed to keep you connected on your terms.\n            </Text>\n          </CardBody>\n          <CardFooter justifyContent=\"center\">\n            <PhoneIcon />\n          </CardFooter>\n        </Card>\n      </SimpleGrid>\n    </>\n  );\n}\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const DeleteIcon = createIcon({\n  displayName: \"DeleteIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const PhoneIcon = createIcon({\n  d: \"M2.20731,0.0127209 C2.1105,-0.0066419 1.99432,-0.00664663 1.91687,0.032079 C0.871279,0.438698 0.212942,1.92964 0.0580392,2.95587 C-0.426031,6.28627 2.20731,9.17133 4.62766,11.0689 C6.77694,12.7534 10.9012,15.5223 13.3409,12.8503 C13.6507,12.5211 14.0186,12.037 13.9993,11.553 C13.9412,10.7397 13.186,10.1588 12.6051,9.71349 C12.1598,9.38432 11.2304,8.47427 10.6495,8.49363 C10.1267,8.51299 9.79754,9.05515 9.46837,9.38432 L8.88748,9.96521 C8.79067,10.062 7.55145,9.24878 7.41591,9.15197 C6.91248,8.8228 6.4284,8.45491 6.00242,8.04829 C5.57644,7.64167 5.18919,7.19632 4.86002,6.73161 C4.7632,6.59607 3.96933,5.41495 4.04678,5.31813 C4.04678,5.31813 4.72448,4.58234 4.91811,4.2919 C5.32473,3.67229 5.63453,3.18822 5.16982,2.45243 C4.99556,2.18135 4.78257,1.96836 4.55021,1.73601 C4.14359,1.34875 3.73698,0.942131 3.27227,0.612963 C3.02055,0.419335 2.59457,0.0708094 2.20731,0.0127209 Z\",\n  displayName: \"PhoneIcon\",\n  viewBox: \"0 0 14 14\",\n})\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["CheckIcon","createIcon","viewBox","path","fill","children","points","EditIcon","displayName","stroke","strokeLinecap","strokeWidth","d","SearchIcon","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","chakra","div","__css","SimpleGrid","count","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","mapResponsive","value","n","_value","getToken","widthToColumns","CardHeader","className","useCardStyles","cx","header","CardFooter","justify","justifyContent","footer","Home","_jsxs","_Fragment","Card","direction","base","sm","alignItems","variant","padding","_jsx","Stack","CardBody","Heading","size","Text","py","paddingTop","DeleteIcon","PhoneIcon","Object","freeze","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","body","createStylesContext","_createStylesContext2","CardStylesProvider","omitThemingProps","_omitThemingProps$dir","align","useMultiStyleConfig","flexDirection","position","minWidth","wordWrap","container","useStyleConfig","decoration","casing","aliasedProps","compact","textAlign","textDecoration","textTransform","p","h2","StackItem","flex","isInline","directionProp","_props$spacing","wrap","divider","shouldWrapChildren","dividerStyle","useMemo","options","dividerStyles","my","mx","borderLeftWidth","borderBottomWidth","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","getValidChildren","child","index","isLast","length","_child","clonedDivider","cloneElement","_divider","Fragment","_className","flexWrap","object","clone","assign","Children","filter","isValidElement"],"sourceRoot":""}